apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "hookd.name" . }}
  labels:
    {{- include "hookd.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "hookd.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "hookd.labels" . | nindent 8 }}
        {{- if .Values.postgres.active }}
        postgres: "true"
        {{- end }}
      annotations:
        kubectl.kubernetes.io/default-container: {{ include "hookd.name" . }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
    spec:
      securityContext:
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
        runAsGroup: 1000
        runAsUser: 1000
        runAsNonRoot: true
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "hookd.name" . }}
      terminationGracePeriodSeconds: 30
      containers:
{{- if not .Values.postgres.active }}
        - name: cloud-sql-proxy
          image: gcr.io/cloudsql-docker/gce-proxy:1.37.8 # make sure to use the latest version
          command:
            - "/cloud_sql_proxy"
            - "-log_debug_stdout"
            - "-instances={{ .Values.database.instance }}=tcp:5432"
            - "-enable_iam_login"
            - "-term_timeout=30s"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
          resources:
            requests:
              memory: "256Mi"
              cpu: "0.22"
{{- end }}
        - name: {{ include "hookd.name" . }}
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /metrics
              port: http
          readinessProbe:
            httpGet:
              path: /metrics
              port: http
          envFrom:
          - secretRef:
              name: {{ include "hookd.name" . }}
{{- if .Values.postgres.active }}
          env:
            - name: PGHOST
              value: {{ include "hookd.name" . }}.pg-{{ .Release.Namespace }}
            - name: PGPORT
              value: "5432"
            - name: PGDATABASE
              value: app
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  key: username
                  name: app-owner-user.{{ include "hookd.name" . }}.credentials.postgresql.acid.zalan.do
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: app-owner-user.{{ include "hookd.name" . }}.credentials.postgresql.acid.zalan.do
            - name: HOOKD_DATABASE_URL
              value: postgresql://$(PGUSER):$(PGPASSWORD)@$(PGHOST):$(PGPORT)/$(PGDATABASE)
{{- end}}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
